import re

import numpy as np
import pandas as pd
import streamlit as st
from urllib.parse import urlparse

from sklearn.compose import ColumnTransformer
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.impute import SimpleImputer
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import StratifiedKFold, cross_val_score, train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.tree import DecisionTreeClassifier

# --------------------- Page Config ---------------------
st.set_page_config(
    page_title="AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (Decision Tree)",
    page_icon="üí∏",
    layout="wide",
)

# --------------------- Global Styles ---------------------
st.markdown(
    """
<style>
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap');
html, body, [class*="css"]  { font-family: 'Inter', system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial; }
:root { --brand:#4f46e5; --brand-2:#a78bfa; --soft:#f5f7ff; --ok:#10b981; --warn:#f59e0b; --bad:#ef4444;}
.block-container { padding-top: 1.2rem !important; }
.hero { padding: 1.2rem 1.4rem; border-radius: 16px; background: linear-gradient(135deg, var(--soft), #ffffff);
        border: 1px solid #eaeefe; display:flex; gap:1rem; align-items:center;}
.hero .emoji { font-size: 1.8rem; }
.hero .title { font-size: 1.2rem; font-weight: 800; letter-spacing: .2px;}
.hero .sub { color:#5b6170; margin-top: 2px; }
.card { border: 1px solid #eaeefe; border-radius: 14px; padding: 1rem 1rem; background: #fff; }
.pill { display:inline-flex; align-items:center; gap:.4rem; padding:.3rem .6rem; border-radius:999px; font-size:.8rem;
        background:#eef2ff; color:#3730a3; border:1px solid #eaeefe; }
.param-pill{ background:#ecfeff; color:#155e75; border-color:#cffafe; }
.kpill{ background:#fef9c3; color:#854d0e; border-color:#fde68a; }
.best { background:#f0fdf4; border:1px solid #bbf7d0; color:#166534; border-radius: 12px; padding:.6rem .8rem; font-weight:600; }
hr.soft { border: none; border-top:1px solid #eef1ff; margin: 1rem 0; }
</style>
""",
    unsafe_allow_html=True,
)

# --------------------- Header ---------------------
colA, colB = st.columns([1, 4])
with colA:
    st.markdown(
        '<div class="hero"><div class="emoji">üí∏</div><div><div class="title">AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤</div><div class="sub">‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Å‡πÇ‡∏ü‡∏•‡∏ß‡πå‡πÄ‡∏ó‡∏£‡∏ô Decision Tree ‚Ä¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß</div></div></div>',
        unsafe_allow_html=True,
    )
with colB:
    st.markdown(
        """
    <div class="card" style="display:flex;gap:.6rem;justify-content:flex-end;align-items:center;">
      <span class="pill">‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (Kaggle/CSV)</span>
      <span class="pill">üåê ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô</span>
      <span class="pill">üå≥ Decision Tree</span>
    </div>
    """,
        unsafe_allow_html=True,
    )

st.write("")

# --------------------- Sidebar: Data ---------------------
st.sidebar.header("‚ë† ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å CSV (Kaggle/‡πÅ‡∏´‡∏•‡πà‡∏á‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞)")
src = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", ["‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV", "‡∏ß‡∏≤‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå CSV (‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞)"])
df = None


def clean_after_read(_df: pd.DataFrame) -> pd.DataFrame:
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaN"""
    _df = _df.replace(["", " ", "NA", "N/A", "na", "n/a", "-", "--", "None", "none"], np.nan)
    _df = _df.replace([np.inf, -np.inf], np.nan)
    return _df


if src == "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV":
    f = st.sidebar.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå .csv", type=["csv"])
    if f is not None:
        df = pd.read_csv(f)
        df = clean_after_read(df)
else:
    url = st.sidebar.text_input("‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏ü‡∏•‡πå CSV (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)")
    if url:
        try:
            parsed = urlparse(url)
            if parsed.scheme in ["http", "https"]:
                df = pd.read_csv(url)
                df = clean_after_read(df)
            else:
                st.sidebar.error("‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ http ‡∏´‡∏£‡∏∑‡∏≠ https")
        except Exception as e:
            st.sidebar.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

if df is None:
    st.info("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå CSV ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå CSV ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏ó‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    st.stop()

st.caption("‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

# --------------------- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ---------------------
st.markdown("### 1) ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô")
st.dataframe(df.head(20), use_container_width=True)
st.caption(f"‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î **{df.shape[0]} ‡πÅ‡∏ñ‡∏ß √ó {df.shape[1]} ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå**")

# --------------------- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå ---------------------
st.markdown("### 2) ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ (label) ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå")
num_cols = df.select_dtypes(include=[np.number]).columns.tolist()
if len(num_cols) == 0:
    st.error("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ä‡∏ô‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ä‡πà‡∏ô monthly_expense)")
    st.stop()

c1, c2 = st.columns([2, 1])
with c1:
    target_col = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á label (‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢)", options=num_cols)
with c2:
    thr_mode = st.radio("‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏ö‡πà‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢", [">= ‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô = ‡∏™‡∏π‡∏á", "‡∏Å‡∏≥‡∏´‡∏ô‡∏î threshold ‡πÄ‡∏≠‡∏á"], horizontal=False)

if thr_mode == ">= ‡∏°‡∏±‡∏ò‡∏¢‡∏ê‡∏≤‡∏ô = ‡∏™‡∏π‡∏á":
    thr = float(np.median(df[target_col].dropna()))
else:
    thr = st.number_input(
        "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ threshold ‡πÄ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô 10000)",
        min_value=0.0,
        value=float(np.median(df[target_col].dropna())),
        step=100.0,
    )

y = (df[target_col] >= thr).astype(int)

col_l, col_r = st.columns(2)
with col_l:
    st.markdown(
        f"""<div class="card"><b>‡∏ô‡∏¥‡∏¢‡∏≤‡∏° Label</b><hr class="soft"/>
        1 = {target_col} ‚â• {thr:.2f}<br/>0 = {target_col} < {thr:.2f}</div>""",
        unsafe_allow_html=True,
    )
with col_r:
    st.markdown(
        f"""<div class="card"><b>‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™</b><hr class="soft"/>
        1 ‚Üí {int(y.sum())} ‡πÅ‡∏ñ‡∏ß &nbsp;&nbsp;|&nbsp;&nbsp; 0 ‚Üí {int((1 - y).sum())} ‡πÅ‡∏ñ‡∏ß</div>""",
        unsafe_allow_html=True,
    )

st.markdown("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏≠‡∏¥‡∏™‡∏£‡∏∞ (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ)")
candidates = [c for c in df.columns if c != target_col]
if len(candidates) == 0:
    st.error("‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå")
    st.stop()

features_selected = st.multiselect("‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå", options=candidates, default=candidates)
if len(features_selected) == 0:
    st.error("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•")
    st.stop()

# --------------------- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Pipeline ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---------------------
X = df[features_selected].copy()
num_feats = X.select_dtypes(include=[np.number]).columns.tolist()
cat_feats = [c for c in X.columns if c not in num_feats]

num_pipe = Pipeline(
    steps=[
        ("imputer", SimpleImputer(strategy="median")),
        ("scaler", StandardScaler()),
    ]
)

cat_pipe = Pipeline(
    steps=[
        ("imputer", SimpleImputer(strategy="most_frequent")),
        ("ohe", OneHotEncoder(handle_unknown="ignore")),
    ]
)

pre_all = ColumnTransformer(
    transformers=[
        ("num", num_pipe, num_feats),
        ("cat", cat_pipe, cat_feats),
    ],
    remainder="drop",
)

# --------------------- Sidebar: ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å ---------------------
st.sidebar.header("‚ë° ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å Decision Tree")
test_size = st.sidebar.slider("‡∏Ç‡∏ô‡∏≤‡∏î‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö (hold-out)", 0.1, 0.4, 0.2, 0.05)
random_state = st.sidebar.number_input("‡∏Ñ‡πà‡∏≤ random_state", min_value=0, value=42, step=1)
cv_folds = st.sidebar.slider("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Stratified K-Fold", 3, 10, 5)

criterion = st.sidebar.selectbox("criterion", ["gini", "entropy"])
max_depths = st.sidebar.multiselect("max_depth", [3, 5, 7, 9, None], default=[3, 5, 7])
min_samples_splits = st.sidebar.multiselect("min_samples_split", [2, 4, 6, 8], default=[2, 4])
min_samples_leafs = st.sidebar.multiselect("min_samples_leaf", [1, 2, 4], default=[1])

st.sidebar.header("‚ë¢ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á")
use_selectk = st.sidebar.checkbox("‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ SelectKBest", value=True)
k_values = st.sidebar.multiselect("‡∏Ñ‡πà‡∏≤ k ‡∏ó‡∏µ‡πà‡∏ó‡∏î‡∏•‡∏≠‡∏á", options=[5, 7, 9, 11, 13, 15, 20], default=[5, 9, 13])

# --------------------- ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ---------------------
st.markdown("### 3) ‡πÄ‡∏ó‡∏£‡∏ô ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
st.markdown(
    '<span class="pill">Stratified K-Fold CV</span> '
    f'<span class="param-pill">criterion: {criterion}</span>',
    unsafe_allow_html=True,
)


def run_cv_table() -> pd.DataFrame:
    """‡πÄ‡∏ó‡∏£‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏∏‡∏î‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå/‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Accuracy ‡∏à‡∏≤‡∏Å Cross-Validation"""
    results = []
    skf = StratifiedKFold(n_splits=cv_folds, shuffle=True, random_state=random_state)
    feature_sets = [("all", None)]
    if use_selectk:
        feature_sets += [(f"SelectKBest(k={k})", k) for k in k_values]

    for tag, k in feature_sets:
        if tag.startswith("SelectKBest"):
            base = Pipeline(
                steps=[
                    ("pre", pre_all),
                    ("sel", SelectKBest(score_func=f_classif, k=max(1, min(k, len(features_selected))))),
                    ("clf", DecisionTreeClassifier(random_state=random_state, criterion=criterion)),
                ]
            )
        else:
            base = Pipeline(
                steps=[
                    ("pre", pre_all),
                    ("clf", DecisionTreeClassifier(random_state=random_state, criterion=criterion)),
                ]
            )

        for md in max_depths:
            for mss in min_samples_splits:
                for msl in min_samples_leafs:
                    pipe = base.set_params(
                        clf__max_depth=md,
                        clf__min_samples_split=mss,
                        clf__min_samples_leaf=msl,
                    )
                    acc = cross_val_score(pipe, X, y, cv=skf, scoring="accuracy").mean()
                    results.append(
                        {
                            "features": tag,
                            "params": (
                                f"criterion={criterion}, max_depth={md}, "
                                f"min_samples_split={mss}, min_samples_leaf={msl}"
                            ),
                            "cv_accuracy": acc,
                        }
                    )

    return pd.DataFrame(results).sort_values("cv_accuracy", ascending=False).reset_index(drop=True)


with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î..."):
    cv_table = run_cv_table()

cv_table_display = cv_table.copy()
cv_table_display.insert(0, "‡∏•‡∏≥‡∏î‡∏±‡∏ö", cv_table_display.index + 1)
cv_table_display = cv_table_display.rename(
    columns={
        "features": "‡∏ä‡∏∏‡∏î‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå",
        "params": "‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå",
        "cv_accuracy": "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (CV)",
    }
)

st.markdown("#### 3.1 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á (Cross-Validation)")
st.dataframe(cv_table_display.style.format({"‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (CV)": "{:.4f}"}), use_container_width=True)

best = cv_table.iloc[0]
c1, c2, c3 = st.columns([3, 2, 2])
with c1:
    st.markdown(
        f"""<div class="card best">‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏î‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î<br/>
        <span class="kpill">‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: {best["features"]}</span><br/>
        <span class="param-pill">{best["params"]}</span></div>""",
        unsafe_allow_html=True,
    )
with c2:
    st.metric("CV Accuracy (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)", f"{best['cv_accuracy']:.4f}")
with c3:
    st.markdown(
        f'<div class="card">‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ hold-out ‚Ä¢ test_size = {test_size:.2f} ‚Ä¢ random_state = {random_state}</div>',
        unsafe_allow_html=True,
    )


def build_best_pipeline(row: pd.Series) -> Pipeline:
    feat_tag = row["features"]
    md_txt = row["params"].split("max_depth=")[1].split(",")[0].strip()
    md = None if md_txt == "None" else int(md_txt)
    mss = int(row["params"].split("min_samples_split=")[1].split(",")[0].strip())
    msl = int(row["params"].split("min_samples_leaf=")[1].strip())

    if feat_tag.startswith("SelectKBest"):
        match = re.search(r"k=(\d+)", feat_tag)
        k = int(match.group(1)) if match else len(features_selected)
        return Pipeline(
            steps=[
                ("pre", pre_all),
                ("sel", SelectKBest(score_func=f_classif, k=max(1, min(k, len(features_selected))))),
                ("clf", DecisionTreeClassifier(
                    random_state=random_state,
                    criterion=criterion,
                    max_depth=md,
                    min_samples_split=mss,
                    min_samples_leaf=msl,
                )),
            ]
        )

    return Pipeline(
        steps=[
            ("pre", pre_all),
            ("clf", DecisionTreeClassifier(
                random_state=random_state,
                criterion=criterion,
                max_depth=md,
                min_samples_split=mss,
                min_samples_leaf=msl,
            )),
        ]
    )


X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=test_size, random_state=random_state, stratify=y
)
final_pipe = build_best_pipeline(best)
final_pipe.fit(X_train, y_train)
y_pred = final_pipe.predict(X_test)

test_acc = accuracy_score(y_test, y_pred)
col1, col2 = st.columns(2)
with col1:
    st.metric("Hold-out Accuracy", f"{test_acc:.4f}")
with col2:
    st.markdown('<div class="card">‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: Decision Tree</div>', unsafe_allow_html=True)

with st.expander("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (Classification Report + Confusion Matrix)"):
    st.markdown("##### Classification Report")
    st.text(
        classification_report(
            y_test,
            y_pred,
            labels=[0, 1],
            digits=4,
            zero_division=0,
        )
    )
    st.markdown("##### Confusion Matrix")
    cm = confusion_matrix(y_test, y_pred, labels=[0, 1])
    st.dataframe(
        pd.DataFrame(cm, index=["Actual 0", "Actual 1"], columns=["Pred 0", "Pred 1"]),
        use_container_width=True,
    )

with st.expander("‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå (Feature Importances)"):
    try:
        pre = final_pipe.named_steps["pre"]
        num_names = pre.transformers_[0][2]
        cat_names = pre.transformers_[1][2]
        ohe = pre.named_transformers_["cat"]
        ohe_names = list(ohe.get_feature_names_out(cat_names)) if len(cat_names) > 0 else []
        all_feat_names = list(num_names) + ohe_names
        importances = final_pipe.named_steps["clf"].feature_importances_
        imp_df = (
            pd.DataFrame({"feature": all_feat_names, "importance": importances})
            .sort_values("importance", ascending=False)
            .head(20)
        )
        st.dataframe(imp_df, use_container_width=True)
    except Exception:
        st.info("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì feature importances ‡πÑ‡∏î‡πâ (‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™/‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)")

st.markdown(
    f"""
    <div class="card">
        <b>‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</b><br/>
        ‡∏ä‡∏∏‡∏î‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå: <code>{best['features']}</code><br/>
        ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå: <code>{best['params']}</code><br/>
        ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (CV): {best['cv_accuracy']:.4f}<br/>
        ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ö‡∏ô hold-out: {test_acc:.4f}
    </div>
    """,
    unsafe_allow_html=True,
)

with st.expander("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ"):
    st.markdown(
        """
- ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV ‡∏à‡∏£‡∏¥‡∏á (‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏á)
- ‡∏™‡∏£‡πâ‡∏≤‡∏á Decision Tree ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏™‡∏π‡∏á/‡∏ï‡πà‡∏≥‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
- ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
- ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ Cross-Validation ‡πÅ‡∏•‡∏∞ Hold-out test ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
- ‡πÇ‡∏´‡∏•‡∏î‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢
        """
    )
